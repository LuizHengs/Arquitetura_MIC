library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package mic1_pkg is
  -- Larguras úteis
  constant W32 : integer := 32;
  constant W8  : integer := 8;

  subtype word_s  is signed(31 downto 0);
  subtype word_u  is unsigned(31 downto 0);
  subtype byte_u  is unsigned(7 downto 0);

  -- Seleção do B-mux (até 16 opções)
  type bsel_t is (
    B_H, B_PC, B_MDR, B_MBRs, B_MBRu, B_SP, B_LV, B_CPP, B_TOS, B_OPC
  );

  -- Registro legível de uma microinstrução
  type micro_t is record
    -- Destinos no C-bus (podem ser múltiplos ao mesmo tempo)
    enH, enOPC, enTOS, enCPP, enLV, enSP, enPC, enMDR, enMAR : std_logic;

    -- Fonte B
    bsel  : bsel_t;

    -- ALU
    F0, F1, ENA, ENB, INVA, INC : std_logic;

    -- Shifter
    SLL8, SRA1 : std_logic;

    -- Memória
    READ, WRITE, FETCH : std_logic;

    -- Sequencer
    JMPC, JAMN, JAMZ : std_logic;
    ADDR : unsigned(8 downto 0);
  end record;

  -- Formato empacotado (para ROM)
  -- [ADDR(9)] [JAM(3)] [MEM(3)] [SHIFT(2)] [ALU(6)] [BSEL(4)] [CDEST(9)]
  constant MICRO_W : integer := 9 + 3 + 3 + 2 + 6 + 4 + 9;
  subtype micro_vec is std_logic_vector(MICRO_W-1 downto 0);

  -- Converte enum bsel_t <-> std_logic_vector(3 downto 0)
  function bsel_to_slv(b : bsel_t) return std_logic_vector;
  function slv_to_bsel(v : std_logic_vector(3 downto 0)) return bsel_t;

  -- Pack/Unpack
  function pack(m : micro_t) return micro_vec;
  function unpack(v : micro_vec) return micro_t;

  -- Helpers de extensão
  function sext8(v : byte_u) return word_s;  -- sign-extend 8->32
  function zext8(v : byte_u) return word_s;  -- zero-extend 8->32 (para B_MBRu)

end package;

package body mic1_pkg is
  function bsel_to_slv(b : bsel_t) return std_logic_vector is
  begin
    return std_logic_vector(to_unsigned(bsel_t'pos(b), 4));
  end;

  function slv_to_bsel(v : std_logic_vector(3 downto 0)) return bsel_t is
    variable i : integer := to_integer(unsigned(v));
  begin
    return bsel_t'val(i);
  end;

  function pack(m : micro_t) return micro_vec is
    variable v : micro_vec := (others => '0');
    variable cdest : std_logic_vector(8 downto 0);
    variable bselv : std_logic_vector(3 downto 0);
    variable alu   : std_logic_vector(5 downto 0);
    variable shf   : std_logic_vector(1 downto 0);
    variable mem   : std_logic_vector(2 downto 0);
    variable jam   : std_logic_vector(2 downto 0);
    variable idx_hi, idx_lo : integer;
  begin
    cdest := m.enH & m.enOPC & m.enTOS & m.enCPP & m.enLV & m.enSP & m.enPC & m.enMDR & m.enMAR;
    bselv := bsel_to_slv(m.bsel);
    alu   := m.F0 & m.F1 & m.ENA & m.ENB & m.INVA & m.INC;
    shf   := m.SLL8 & m.SRA1;
    mem   := m.READ & m.WRITE & m.FETCH;
    jam   := m.JMPC & m.JAMN & m.JAMZ;

    -- Concatenação na ordem definida
    v := std_logic_vector(m.ADDR) & jam & mem & shf & alu & bselv & cdest;
    return v;
  end;

  function unpack(v : micro_vec) return micro_t is
    variable m : micro_t;
    variable p : integer := MICRO_W-1;
  begin
    -- ADDR
    m.ADDR := unsigned(v(p downto p-8));          p := p-9;
    -- JAM
    m.JMPC := v(p); m.JAMN := v(p-1); m.JAMZ := v(p-2); p := p-3;
    -- MEM
    m.READ := v(p); m.WRITE := v(p-1); m.FETCH := v(p-2); p := p-3;
    -- SHIFT
    m.SLL8 := v(p); m.SRA1 := v(p-1); p := p-2;
    -- ALU
    m.F0   := v(p); m.F1   := v(p-1); m.ENA := v(p-2); m.ENB := v(p-3); m.INVA := v(p-4); m.INC := v(p-5); p := p-6;
    -- BSEL
    m.bsel := slv_to_bsel(v(p downto p-3));       p := p-4;
    -- CDEST  (enH,enOPC,enTOS,enCPP,enLV,enSP,enPC,enMDR,enMAR)
    m.enH   := v(p);   m.enOPC := v(p-1); m.enTOS := v(p-2); m.enCPP := v(p-3);
    m.enLV  := v(p-4); m.enSP  := v(p-5); m.enPC  := v(p-6); m.enMDR := v(p-7); m.enMAR := v(p-8);
    return m;
  end;

  function sext8(v : byte_u) return word_s is
    variable s : signed(31 downto 0);
  begin
    s := resize(signed(v), 32); -- cast para signed 8->32 preserva sinal
    return s;
  end;

  function zext8(v : byte_u) return word_s is
    variable u : unsigned(31 downto 0);
  begin
    u := resize(v, 32);
    return signed(u);
  end;

end package body;
